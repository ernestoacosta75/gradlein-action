import org.omg.CORBA.INTERNAL

plugins {
    id 'io.freefair.lombok' version '4.1.0'
    id "org.akhikhl.gretty" version "1.2.4"
}

apply plugin: 'java'
apply plugin: 'war'

ext {
    javaxServletApiVersion = '2.5'
    javaxServletJstlVersion = '1.1.2'
    jUnitVersion = '4.12'
    commonsLangVersion = '3.4'
    versionFile = file('version.properties')    // File method is provided by Project interfafe;
                                                // it creates an instance of java.io.File relative
                                                // to project directory
}

webAppDirName = 'webfiles'

war {
    from 'static'
}

// Grade attributes
group 'com.eara.gia'
version = new ProjectVersion(0, 1)               // Identifies project's version through a number scheme

sourceCompatibility = 1.8   // Sets Java version compilation compatibility to 1.8

// Repositories
repositories {
    jcenter()
    mavenCentral()  // Shortcut notation for configuring Maven Central 2 repository
}

configurations {
    // configuration that holds jars to include in the jar
    compile
}

// In Gradle, dependencies are grouped by configurations. One of the configurations that th Java plugin introduces ins 'compile
dependencies {
    providedCompile "javax.servlet:servlet-api:${javaxServletApiVersion}"
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    runtime 'javax.servlet:jstl:1.1.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Customizing the Gretty plugin
gretty {
    httpPort = 9090
    scanInterval = 1    //Scan for changes every second
    host = '0.0.0.0'    // Enable network access from outside your local machine
    managedClassReload = true   // Activate spring-loaded class realoading
    consoleLogEnabled = true
    contextPath = 'todo'

}

// ----------- TASKS -----------
// Setting up the wrapper
task wrapperSettings(type: Wrapper) {
    gradleVersion = '5.6.2'
}

/**
 * "group" and "description" properties act as part of the task documentation.
 *
 * The "description" property represents a short definition of the task's purpose.
 * The "group" property defines a logic grouping of tasks.
 */
task printVersion(group: 'versioning', description: 'Prints project version.') {
    // Initial declaration of a task can contain a first and last action
    doFirst {
        println "Before reading the project version"
    }

    // Printing the version number with the log level QUIET
    doLast {
        logger.quiet "Version: $version"
    }
}


// Task configurations
task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    // If version file doesn't exist throw a GradleException with an appropriate error message
    if(!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    // Groovy's file implementation add methods to read it with newly created InputStream
    versionFile.withInputStream {
        stream -> versionProps.load(stream)
    }

    // In Groovy you can omit the return keyword if it's last statement in method
    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}


task makeReleaseVersion(group: 'versioning', description: 'Makes project a release version.') {
    doFirst {
        version.release = true
        ant.propertyfile(file: versionFile) {
            entry( key: "release", value: "true")
        }
    }
}

// Class definitions

class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}" //-SNAPSHOT suffix is only added if release property is false
    }
}

