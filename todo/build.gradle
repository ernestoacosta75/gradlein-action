allprojects {
    group = 'com.eara.gia.todo'
    version = '0.1'

    repositories {
        jcenter()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.16.16'
        annotationProcessor 'org.projectlombok:lombok:1.18.2'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
        testCompile 'junit:junit:4.12', 'org.testng:testng:6.8'
    }
}

/**
import com.eara.gia.ProjectVersion
import com.eara.gia.ReleaseVersionTask
import com.eara.gia.ReleaseVersionListener

// BUILD SCRIPTS

// PLUGINS
plugins {
    id 'io.freefair.lombok' version '4.1.0'
    id "org.akhikhl.gretty" version "1.2.4"
}

// Customizing the Gretty plugin
gretty {
    httpPort = 9090
    scanInterval = 1    //Scan for changes every second
    host = '0.0.0.0'    // Enable network access from outside your local machine
    managedClassReload = true   // Activate spring-loaded class realoading
    consoleLogEnabled = true
    contextPath = 'todo'

}

apply plugin: 'java'
apply plugin: 'war'

webAppDirName = 'webfiles'

war {
    from 'static'
}

// GRADLE ATTRIBUTES
group 'com.eara.gia'
version = new ProjectVersion(0, 1)  // Identifies project's version through a number scheme
sourceCompatibility = 1.8           // Sets Java version compilation compatibility to 1.8

// CONFIGURATIONS
configurations {
    // configuration that holds jars to include in the jar
    compile

    cargo {
        description = 'Classpath for Cargo Ant tasks.'
        visible = false
        resolutionStrategy {
            force 'org.codehaus.cargo:cargo-ant:1.3.0'
        }
    }
}

// REPOSITORIES
repositories {
    mavenCentral()
    // Declaring a custom Maven repository
    maven {
        name 'Custom Maven Repository'
        url 'http://repository-gradle-in-action.forge.cloudbees.com/release/'
    }
}

// DEPENDENCIES
ext {
    javaxServletApiVersion = '2.5'
    javaxServletJstlVersion = '1.2'
    jUnitVersion = '4.12'
    commonsLangVersion = '3.4'
    versionFile = file('version.properties')    // File method is provided by Project interface it creates an instance of java.io.File relative to project directory

    cargoGroup = 'org.codehaus.cargo'
    cargoVersion = '1.4.5'
    dynamicCargoVersion = '1.+'

    tomcatDownloadUrl = 'http://.../apache-tomcat-7.0.50.zip'
    cargoHome = "$buildDir/cargo"
}

// In Gradle, dependencies are grouped by configurations. One of the configurations that th Java plugin introduces ins 'compile
dependencies {
    providedCompile "javax.servlet:servlet-api:$javaxServletApiVersion"
    compile group: 'org.apache.commons', name: 'commons-lang3', version: "$commonsLangVersion"
    runtime "javax.servlet:jstl:$javaxServletJstlVersion"
    testCompile group: 'junit', name: 'junit', version: "$jUnitVersion"

    cargo group: cargoGroup, name: 'cargo-core-uberjar', version: cargoVersion
    cargo ("$cargoGroup:cargo-ant:$cargoVersion") {
        transitive = false
    }
    cargo 'xml-apis:xml-apis:2.0.2'
}

// ----------- TASKS -----------

// Setting up the wrapper
task wrapperSettings(type: Wrapper) {
    gradleVersion = '5.6.2'
}


//"group" and "description" properties act as part of the task documentation.
//
// The "description" property represents a short definition of the task's purpose.
//The "group" property defines a logic grouping of tasks.

task printVersion(group: 'versioning', description: 'Prints project version.') {
    // Initial declaration of a task can contain a first and last action
    doFirst {
        println "Before reading the project version"
    }

    // Printing the version number with the log level QUIET
    doLast {
        logger.quiet "Version: $version"
    }
}


// Task configurations
task loadVersion {
    project.version = readVersion()
}

ProjectVersion readVersion() {
    logger.quiet 'Reading the version file.'

    // If version file doesn't exist throw a GradleException with an appropriate error message
    if(!versionFile.exists()) {
        throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
    }

    Properties versionProps = new Properties()

    // Groovy's file implementation add methods to read it with newly created InputStream
    versionFile.withInputStream {
        stream -> versionProps.load(stream)
    }

    // In Groovy you can omit the return keyword if it's last statement in method
    new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}


//Task to create a distribution

task createDistribution(group: 'releasing', description: 'Creation of the distribution file', type: Zip) {
    // Implicit reference to output of War task
    from war.outputs.files

    // Takes all source files and puts them into src directory of ZIP file
    from(sourceSets*.allSource) {
        into 'src'
    }

    // Add versione file to ZIP
    from(rootDir) {
        include versionFile.name
    }
}


//Task to zip the release distribution

task backupReleaseDistribution(group: 'releasing', description: 'Zipping the release distribution', type: Copy) {
    // Implicit reference to output of createDistribution output
    from createDistribution.outputs.files
    into "$buildDir/backup"
}


//Task to create the release

task release (group: 'releasing', description: 'Releasing of the distribution',dependsOn: backupReleaseDistribution) {
    doLast {
        logger.quiet 'Releasing the project'
    }
}


//Task rule to merging similar logic tasks

tasks.addRule("Pattern: increment<Classifier>Version - Increments the project version classifier.") {
    String taskName ->
        if(taskName.startsWith('increment') && taskName.endsWith('Version')) {
            task(taskName) {
                doLast {
                    String classifier = (taskName - 'increment' - 'Version').toLowerCase()
                    String currentVersion = version.toString()

                    switch(classifier) {
                        case 'major': ++version.major
                                      break
                        case 'minor': ++version.minor
                            break
                        default: throw new GradleException("Invalid version type '$classifier. Allowed types: ['Major', 'Minor']")
                    }

                    String newVersion = version.toString()
                    logger.info("Incrementing $classifier project version: $currentVersion -> $newVersion")

                    ant.propertyfile(file: destFile) {
                        entry( key: classifier,  type: 'int', operation: '+', value: 1)
                    }
                }
            }
        }
}


// Deploying the war to Tomcat

task deployToLocalTomcat {
    doLast {
        FileTree cargoDeps = configurations.getByName('cargo').asFileTree
        ant.taskdef(resource: 'cargo.tasks', classpath: cargoDeps.asPath)

        ant.cargo(containerId: 'tomcat7x', home: 'C:\\apache-tomcat-7.0.50', action: 'run', output: "$buildDir/output.log") {
            configuration {
                deployable(type: 'war', file: "$buildDir/libs/todolist-0.1.war")
            }

            //zipUrlInstaller(installUrl: 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.50/bin/apache-tomcat-7.0.50.zip', downloadDir: "$buildDir/download")
        }
    }
}


// Copying the Cargo dependencies to the local file system

task copyDependenciesToLocalDir(type: Copy) {
    // Syntactic sugar provided by Gradle API; same as calling configurations.getByName('cargo').asFileTree
    from configurations.cargo.asFileTree
    into "${System.properties['user.home']}/libs/cargo"
}


// LISTENERS
def releaseVersionListener = new ReleaseVersionListener()

// Registers listener to task execution graph
gradle.taskGraph.addTaskExecutionGraphListener(releaseVersionListener)*/


